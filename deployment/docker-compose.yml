#
# Production server with UWSGI configured to run on port 8080
#
# Usage:
# fig -f fig-.yml <command>
#
# Typical useage:
#
# fig build
# fig up -d web
#
# See accompanying Make commands for easy collectstatic etc.

smtp:
  image: catatnight/postfix
  hostname: postfix
  environment:
    # You could change this to something more suitable
    - maildomain=kartoza.com
    - smtp_user=noreply:docker

elasticsearch:
  image: elasticsearch
  hostname: elasticsearch
  environment:
    - HAYSTACK_PORT=9200
  ports:
    - "9200:9200"

db:
  image: kartoza/postgis
  volumes:
    - ./pg/postgres_data:/var/lib/postgresql
    - ./pg_setup_data:/home/setup
  environment:
    - USERNAME=docker
    - PASS=docker
  # TODO: Why are exposing ports to the host? This is
  # TODO: an anti-pattern - TS
  ports:
    - "6543:5432"

dbbackups:
  image: kartoza/pg-backups
  hostname: pg-backups
  volumes:
    - ./backups:/backups
  links:
    - db:db
  environment:
    - DUMPPREFIX=PG_FETI
    # These are all defaults anyway, but setting explicitly in
    # case we ever want to ever use different credentials
    - PGUSER=docker
    - PGPASSWORD=docker
    - PGPORT=5432
    - PGHOST=db
    - PGDATABASE=gis

qgisserver:
  image: kartoza/qgis-server
  hostname: qgis-server
  volumes:
    - ../maps:/web
    - ./logs/qgisserver:/var/log/apache2
  links:
    - db:db

mapproxy:
  image: kartoza/mapproxy
  hostname: mapproxy
  volumes:
    - ../mapproxy:/mapproxy
  volumes_from:
    - qgisserver
  links:
    - qgisserver:qgisserver

uwsgi:
  build: docker-prod
  hostname: uwsgi
  environment:
    - DATABASE_NAME=gis
    - DATABASE_USERNAME=docker
    - DATABASE_PASSWORD=docker
    - DATABASE_HOST=db
    - DJANGO_SETTINGS_MODULE=core.settings.prod_docker
    - VIRTUAL_HOST=users.inasafe.org
    - VIRTUAL_PORT=8080
    - HAYSTACK_HOST=elasticsearch
  volumes:
    - ../django_project:/home/web/django_project
    - ./static:/home/web/static
    - ./media:/home/web/media
    - ./logs:/var/log/
  links:
    - smtp:smtp
    - db:db
    - elasticsearch:elasticsearch

web:
  image: nginx
  hostname: nginx
  volumes:
    - ./sites-enabled:/etc/nginx/conf.d:ro
    # I dont use volumes_from as I want to use the ro modifier
    - ./static:/home/web/static:ro
    - ./media:/home/web/media:ro
    - ./logs:/var/log/nginx
  links:
    - uwsgi:uwsgi
    - qgisserver:qgisserver
    - mapproxy:mapproxy
  ports:
    - "63100:8080"

# Exactly the same as web but for staging we use a different port.
stagingweb:
  image: nginx
  hostname: nginx
  volumes:
    - ./sites-enabled:/etc/nginx/conf.d:ro
    # I dont use volumes_from as I want to use the ro modifier
    - ./static:/home/web/static:ro
    - ./media:/home/web/media:ro
    - ./logs:/var/log/nginx
    - ./reports:/home/web/reports
  links:
    - uwsgi:uwsgi
    - qgisserver:qgisserver
    - mapproxy:mapproxy
#    - cron:cron
  ports:
    - "63101:8080"
